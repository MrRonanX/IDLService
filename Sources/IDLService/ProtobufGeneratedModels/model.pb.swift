// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: chesscom/themes/v1alpha/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Chesscom_Themes_V1alpha_Theme {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var background: Chesscom_Themes_V1alpha_Background {
    get {return _storage._background ?? Chesscom_Themes_V1alpha_Background()}
    set {_uniqueStorage()._background = newValue}
  }
  /// Returns true if `background` has been explicitly set.
  public var hasBackground: Bool {return _storage._background != nil}
  /// Clears the value of `background`. Subsequent reads from it will return its default value.
  public mutating func clearBackground() {_uniqueStorage()._background = nil}

  public var boardStyle: Chesscom_Themes_V1alpha_BoardStyle {
    get {return _storage._boardStyle ?? Chesscom_Themes_V1alpha_BoardStyle()}
    set {_uniqueStorage()._boardStyle = newValue}
  }
  /// Returns true if `boardStyle` has been explicitly set.
  public var hasBoardStyle: Bool {return _storage._boardStyle != nil}
  /// Clears the value of `boardStyle`. Subsequent reads from it will return its default value.
  public mutating func clearBoardStyle() {_uniqueStorage()._boardStyle = nil}

  public var pieceSet: Chesscom_Themes_V1alpha_PieceSet {
    get {return _storage._pieceSet ?? Chesscom_Themes_V1alpha_PieceSet()}
    set {_uniqueStorage()._pieceSet = newValue}
  }
  /// Returns true if `pieceSet` has been explicitly set.
  public var hasPieceSet: Bool {return _storage._pieceSet != nil}
  /// Clears the value of `pieceSet`. Subsequent reads from it will return its default value.
  public mutating func clearPieceSet() {_uniqueStorage()._pieceSet = nil}

  public var soundSet: Chesscom_Themes_V1alpha_SoundSet {
    get {return _storage._soundSet ?? Chesscom_Themes_V1alpha_SoundSet()}
    set {_uniqueStorage()._soundSet = newValue}
  }
  /// Returns true if `soundSet` has been explicitly set.
  public var hasSoundSet: Bool {return _storage._soundSet != nil}
  /// Clears the value of `soundSet`. Subsequent reads from it will return its default value.
  public mutating func clearSoundSet() {_uniqueStorage()._soundSet = nil}

  public var isDefault: Bool {
    get {return _storage._isDefault}
    set {_uniqueStorage()._isDefault = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Chesscom_Themes_V1alpha_Background {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  /// URL for the original, full image. Optional in favor of `fallback_color` in case of a plain color backgrounds.
  public var image: String {
    get {return _image ?? String()}
    set {_image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  public var hasImage: Bool {return self._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  public mutating func clearImage() {self._image = nil}

  /// Hex color code to use for rendering. Optional in favor of `image` in case of custom image backgrounds.
  public var fallbackColor: String {
    get {return _fallbackColor ?? String()}
    set {_fallbackColor = newValue}
  }
  /// Returns true if `fallbackColor` has been explicitly set.
  public var hasFallbackColor: Bool {return self._fallbackColor != nil}
  /// Clears the value of `fallbackColor`. Subsequent reads from it will return its default value.
  public mutating func clearFallbackColor() {self._fallbackColor = nil}

  /// URL for the preview image.
  public var previewImage: String = String()

  public var isDefault: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _image: String? = nil
  fileprivate var _fallbackColor: String? = nil
}

public struct Chesscom_Themes_V1alpha_BoardStyle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  /// URL for the original, full image.
  public var image: String = String()

  public var image3D: Chesscom_Themes_V1alpha_BoardStyle.ThreeDimensionalImage {
    get {return _image3D ?? Chesscom_Themes_V1alpha_BoardStyle.ThreeDimensionalImage()}
    set {_image3D = newValue}
  }
  /// Returns true if `image3D` has been explicitly set.
  public var hasImage3D: Bool {return self._image3D != nil}
  /// Clears the value of `image3D`. Subsequent reads from it will return its default value.
  public mutating func clearImage3D() {self._image3D = nil}

  /// URL for the preview image.
  public var previewImage: String = String()

  /// Hex color used when drawing coordinate text on a dark square.
  public var coordinateColorDark: String = String()

  /// Hex color used when drawing coordinate text on a light square.
  public var coordinateColorLight: String = String()

  /// Hex color used to highlight the most recent move on the board.
  public var highlightColor: String = String()

  public var isDefault: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct ThreeDimensionalImage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// URL for the board image.
    public var board: String = String()

    /// URL for the board coordinates image.
    public var coordinates: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _image3D: Chesscom_Themes_V1alpha_BoardStyle.ThreeDimensionalImage? = nil
}

public struct Chesscom_Themes_V1alpha_PieceSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var perspective: Chesscom_Themes_V1alpha_PieceSet.PiecePerspective {
    get {return _storage._perspective}
    set {_uniqueStorage()._perspective = newValue}
  }

  public var images: Chesscom_Themes_V1alpha_PieceSet.Images {
    get {return _storage._images ?? Chesscom_Themes_V1alpha_PieceSet.Images()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  public var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  public mutating func clearImages() {_uniqueStorage()._images = nil}

  /// URL for the preview image.
  public var previewImage: String {
    get {return _storage._previewImage}
    set {_uniqueStorage()._previewImage = newValue}
  }

  public var isDefault: Bool {
    get {return _storage._isDefault}
    set {_uniqueStorage()._isDefault = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Some piece styles require special perspective
  public enum PiecePerspective: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case topDown // = 1
    case pseudo3D // = 2
    case real3D // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .topDown
      case 2: self = .pseudo3D
      case 3: self = .real3D
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .topDown: return 1
      case .pseudo3D: return 2
      case .real3D: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Images {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var whitePawn: String = String()

    public var whiteKnight: String = String()

    public var whiteBishop: String = String()

    public var whiteRook: String = String()

    public var whiteQueen: String = String()

    public var whiteKing: String = String()

    public var blackPawn: String = String()

    public var blackKnight: String = String()

    public var blackBishop: String = String()

    public var blackRook: String = String()

    public var blackQueen: String = String()

    public var blackKing: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Chesscom_Themes_V1alpha_PieceSet.PiecePerspective: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Chesscom_Themes_V1alpha_PieceSet.PiecePerspective] = [
    .unspecified,
    .topDown,
    .pseudo3D,
    .real3D,
  ]
}

#endif  // swift(>=4.2)

public struct Chesscom_Themes_V1alpha_SoundSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var sounds: Chesscom_Themes_V1alpha_SoundSet.OneOf_Sounds? = nil

  public var soundArchives: Chesscom_Themes_V1alpha_SoundSet.SoundArchives {
    get {
      if case .soundArchives(let v)? = sounds {return v}
      return Chesscom_Themes_V1alpha_SoundSet.SoundArchives()
    }
    set {sounds = .soundArchives(newValue)}
  }

  public var soundFiles: Chesscom_Themes_V1alpha_SoundSet.SoundFiles {
    get {
      if case .soundFiles(let v)? = sounds {return v}
      return Chesscom_Themes_V1alpha_SoundSet.SoundFiles()
    }
    set {sounds = .soundFiles(newValue)}
  }

  public var isDefault: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Sounds: Equatable {
    case soundArchives(Chesscom_Themes_V1alpha_SoundSet.SoundArchives)
    case soundFiles(Chesscom_Themes_V1alpha_SoundSet.SoundFiles)

  #if !swift(>=4.1)
    public static func ==(lhs: Chesscom_Themes_V1alpha_SoundSet.OneOf_Sounds, rhs: Chesscom_Themes_V1alpha_SoundSet.OneOf_Sounds) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.soundArchives, .soundArchives): return {
        guard case .soundArchives(let l) = lhs, case .soundArchives(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.soundFiles, .soundFiles): return {
        guard case .soundFiles(let l) = lhs, case .soundFiles(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct SoundArchives {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// URL for the archive with files in .mp3 format
    public var mp3: String = String()

    /// URL for the archive with files in .ogg format
    public var ogg: String = String()

    /// URL for the archive with files in .wav format
    public var wav: String = String()

    /// URL for the archive with files in .webm format
    public var webm: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Individual files extracted from the archive
  public struct SoundFiles {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Sound name-URL map for .mp3 format
    public var mp3: Dictionary<String,String> = [:]

    /// Sound name-URL map for .ogg format
    public var ogg: Dictionary<String,String> = [:]

    /// Sound name-URL map for .wav format
    public var wav: Dictionary<String,String> = [:]

    /// Sound name-URL map for .webm format
    public var webm: Dictionary<String,String> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Chesscom_Themes_V1alpha_Theme: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_Background: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_BoardStyle: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_BoardStyle.ThreeDimensionalImage: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_PieceSet: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_PieceSet.PiecePerspective: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_PieceSet.Images: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_SoundSet: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_SoundSet.OneOf_Sounds: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_SoundSet.SoundArchives: @unchecked Sendable {}
extension Chesscom_Themes_V1alpha_SoundSet.SoundFiles: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "chesscom.themes.v1alpha"

extension Chesscom_Themes_V1alpha_Theme: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Theme"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "background"),
    4: .standard(proto: "board_style"),
    5: .standard(proto: "piece_set"),
    6: .standard(proto: "sound_set"),
    7: .standard(proto: "is_default"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _name: String = String()
    var _background: Chesscom_Themes_V1alpha_Background? = nil
    var _boardStyle: Chesscom_Themes_V1alpha_BoardStyle? = nil
    var _pieceSet: Chesscom_Themes_V1alpha_PieceSet? = nil
    var _soundSet: Chesscom_Themes_V1alpha_SoundSet? = nil
    var _isDefault: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _background = source._background
      _boardStyle = source._boardStyle
      _pieceSet = source._pieceSet
      _soundSet = source._soundSet
      _isDefault = source._isDefault
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._background) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._boardStyle) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._pieceSet) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._soundSet) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._isDefault) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      try { if let v = _storage._background {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._boardStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._pieceSet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._soundSet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if _storage._isDefault != false {
        try visitor.visitSingularBoolField(value: _storage._isDefault, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chesscom_Themes_V1alpha_Theme, rhs: Chesscom_Themes_V1alpha_Theme) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._background != rhs_storage._background {return false}
        if _storage._boardStyle != rhs_storage._boardStyle {return false}
        if _storage._pieceSet != rhs_storage._pieceSet {return false}
        if _storage._soundSet != rhs_storage._soundSet {return false}
        if _storage._isDefault != rhs_storage._isDefault {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chesscom_Themes_V1alpha_Background: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Background"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "image"),
    4: .standard(proto: "fallback_color"),
    5: .standard(proto: "preview_image"),
    6: .standard(proto: "is_default"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._image) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._fallbackColor) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.previewImage) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isDefault) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try { if let v = self._image {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._fallbackColor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    if !self.previewImage.isEmpty {
      try visitor.visitSingularStringField(value: self.previewImage, fieldNumber: 5)
    }
    if self.isDefault != false {
      try visitor.visitSingularBoolField(value: self.isDefault, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chesscom_Themes_V1alpha_Background, rhs: Chesscom_Themes_V1alpha_Background) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._image != rhs._image {return false}
    if lhs._fallbackColor != rhs._fallbackColor {return false}
    if lhs.previewImage != rhs.previewImage {return false}
    if lhs.isDefault != rhs.isDefault {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chesscom_Themes_V1alpha_BoardStyle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BoardStyle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "image"),
    4: .standard(proto: "image_3d"),
    5: .standard(proto: "preview_image"),
    6: .standard(proto: "coordinate_color_dark"),
    7: .standard(proto: "coordinate_color_light"),
    8: .standard(proto: "highlight_color"),
    9: .standard(proto: "is_default"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.image) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._image3D) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.previewImage) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.coordinateColorDark) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.coordinateColorLight) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.highlightColor) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.isDefault) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 3)
    }
    try { if let v = self._image3D {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.previewImage.isEmpty {
      try visitor.visitSingularStringField(value: self.previewImage, fieldNumber: 5)
    }
    if !self.coordinateColorDark.isEmpty {
      try visitor.visitSingularStringField(value: self.coordinateColorDark, fieldNumber: 6)
    }
    if !self.coordinateColorLight.isEmpty {
      try visitor.visitSingularStringField(value: self.coordinateColorLight, fieldNumber: 7)
    }
    if !self.highlightColor.isEmpty {
      try visitor.visitSingularStringField(value: self.highlightColor, fieldNumber: 8)
    }
    if self.isDefault != false {
      try visitor.visitSingularBoolField(value: self.isDefault, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chesscom_Themes_V1alpha_BoardStyle, rhs: Chesscom_Themes_V1alpha_BoardStyle) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.image != rhs.image {return false}
    if lhs._image3D != rhs._image3D {return false}
    if lhs.previewImage != rhs.previewImage {return false}
    if lhs.coordinateColorDark != rhs.coordinateColorDark {return false}
    if lhs.coordinateColorLight != rhs.coordinateColorLight {return false}
    if lhs.highlightColor != rhs.highlightColor {return false}
    if lhs.isDefault != rhs.isDefault {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chesscom_Themes_V1alpha_BoardStyle.ThreeDimensionalImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Chesscom_Themes_V1alpha_BoardStyle.protoMessageName + ".ThreeDimensionalImage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "board"),
    2: .same(proto: "coordinates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.board) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.coordinates) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.board.isEmpty {
      try visitor.visitSingularStringField(value: self.board, fieldNumber: 1)
    }
    if !self.coordinates.isEmpty {
      try visitor.visitSingularStringField(value: self.coordinates, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chesscom_Themes_V1alpha_BoardStyle.ThreeDimensionalImage, rhs: Chesscom_Themes_V1alpha_BoardStyle.ThreeDimensionalImage) -> Bool {
    if lhs.board != rhs.board {return false}
    if lhs.coordinates != rhs.coordinates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chesscom_Themes_V1alpha_PieceSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PieceSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "perspective"),
    4: .same(proto: "images"),
    5: .standard(proto: "preview_image"),
    6: .standard(proto: "is_default"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _name: String = String()
    var _perspective: Chesscom_Themes_V1alpha_PieceSet.PiecePerspective = .unspecified
    var _images: Chesscom_Themes_V1alpha_PieceSet.Images? = nil
    var _previewImage: String = String()
    var _isDefault: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _perspective = source._perspective
      _images = source._images
      _previewImage = source._previewImage
      _isDefault = source._isDefault
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._perspective) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._images) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._previewImage) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._isDefault) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if _storage._perspective != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._perspective, fieldNumber: 3)
      }
      try { if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._previewImage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._previewImage, fieldNumber: 5)
      }
      if _storage._isDefault != false {
        try visitor.visitSingularBoolField(value: _storage._isDefault, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chesscom_Themes_V1alpha_PieceSet, rhs: Chesscom_Themes_V1alpha_PieceSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._perspective != rhs_storage._perspective {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._previewImage != rhs_storage._previewImage {return false}
        if _storage._isDefault != rhs_storage._isDefault {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chesscom_Themes_V1alpha_PieceSet.PiecePerspective: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PIECE_PERSPECTIVE_UNSPECIFIED"),
    1: .same(proto: "TOP_DOWN"),
    2: .same(proto: "PSEUDO_3D"),
    3: .same(proto: "REAL_3D"),
  ]
}

extension Chesscom_Themes_V1alpha_PieceSet.Images: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Chesscom_Themes_V1alpha_PieceSet.protoMessageName + ".Images"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "white_pawn"),
    2: .standard(proto: "white_knight"),
    3: .standard(proto: "white_bishop"),
    4: .standard(proto: "white_rook"),
    5: .standard(proto: "white_queen"),
    6: .standard(proto: "white_king"),
    7: .standard(proto: "black_pawn"),
    8: .standard(proto: "black_knight"),
    9: .standard(proto: "black_bishop"),
    10: .standard(proto: "black_rook"),
    11: .standard(proto: "black_queen"),
    12: .standard(proto: "black_king"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.whitePawn) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.whiteKnight) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.whiteBishop) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.whiteRook) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.whiteQueen) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.whiteKing) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.blackPawn) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.blackKnight) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.blackBishop) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.blackRook) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.blackQueen) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.blackKing) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.whitePawn.isEmpty {
      try visitor.visitSingularStringField(value: self.whitePawn, fieldNumber: 1)
    }
    if !self.whiteKnight.isEmpty {
      try visitor.visitSingularStringField(value: self.whiteKnight, fieldNumber: 2)
    }
    if !self.whiteBishop.isEmpty {
      try visitor.visitSingularStringField(value: self.whiteBishop, fieldNumber: 3)
    }
    if !self.whiteRook.isEmpty {
      try visitor.visitSingularStringField(value: self.whiteRook, fieldNumber: 4)
    }
    if !self.whiteQueen.isEmpty {
      try visitor.visitSingularStringField(value: self.whiteQueen, fieldNumber: 5)
    }
    if !self.whiteKing.isEmpty {
      try visitor.visitSingularStringField(value: self.whiteKing, fieldNumber: 6)
    }
    if !self.blackPawn.isEmpty {
      try visitor.visitSingularStringField(value: self.blackPawn, fieldNumber: 7)
    }
    if !self.blackKnight.isEmpty {
      try visitor.visitSingularStringField(value: self.blackKnight, fieldNumber: 8)
    }
    if !self.blackBishop.isEmpty {
      try visitor.visitSingularStringField(value: self.blackBishop, fieldNumber: 9)
    }
    if !self.blackRook.isEmpty {
      try visitor.visitSingularStringField(value: self.blackRook, fieldNumber: 10)
    }
    if !self.blackQueen.isEmpty {
      try visitor.visitSingularStringField(value: self.blackQueen, fieldNumber: 11)
    }
    if !self.blackKing.isEmpty {
      try visitor.visitSingularStringField(value: self.blackKing, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chesscom_Themes_V1alpha_PieceSet.Images, rhs: Chesscom_Themes_V1alpha_PieceSet.Images) -> Bool {
    if lhs.whitePawn != rhs.whitePawn {return false}
    if lhs.whiteKnight != rhs.whiteKnight {return false}
    if lhs.whiteBishop != rhs.whiteBishop {return false}
    if lhs.whiteRook != rhs.whiteRook {return false}
    if lhs.whiteQueen != rhs.whiteQueen {return false}
    if lhs.whiteKing != rhs.whiteKing {return false}
    if lhs.blackPawn != rhs.blackPawn {return false}
    if lhs.blackKnight != rhs.blackKnight {return false}
    if lhs.blackBishop != rhs.blackBishop {return false}
    if lhs.blackRook != rhs.blackRook {return false}
    if lhs.blackQueen != rhs.blackQueen {return false}
    if lhs.blackKing != rhs.blackKing {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chesscom_Themes_V1alpha_SoundSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SoundSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "sound_archives"),
    4: .standard(proto: "sound_files"),
    5: .standard(proto: "is_default"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try {
        var v: Chesscom_Themes_V1alpha_SoundSet.SoundArchives?
        var hadOneofValue = false
        if let current = self.sounds {
          hadOneofValue = true
          if case .soundArchives(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.sounds = .soundArchives(v)
        }
      }()
      case 4: try {
        var v: Chesscom_Themes_V1alpha_SoundSet.SoundFiles?
        var hadOneofValue = false
        if let current = self.sounds {
          hadOneofValue = true
          if case .soundFiles(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.sounds = .soundFiles(v)
        }
      }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isDefault) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    switch self.sounds {
    case .soundArchives?: try {
      guard case .soundArchives(let v)? = self.sounds else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .soundFiles?: try {
      guard case .soundFiles(let v)? = self.sounds else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    if self.isDefault != false {
      try visitor.visitSingularBoolField(value: self.isDefault, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chesscom_Themes_V1alpha_SoundSet, rhs: Chesscom_Themes_V1alpha_SoundSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.sounds != rhs.sounds {return false}
    if lhs.isDefault != rhs.isDefault {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chesscom_Themes_V1alpha_SoundSet.SoundArchives: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Chesscom_Themes_V1alpha_SoundSet.protoMessageName + ".SoundArchives"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mp3"),
    2: .same(proto: "ogg"),
    3: .same(proto: "wav"),
    4: .same(proto: "webm"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mp3) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ogg) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.wav) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.webm) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mp3.isEmpty {
      try visitor.visitSingularStringField(value: self.mp3, fieldNumber: 1)
    }
    if !self.ogg.isEmpty {
      try visitor.visitSingularStringField(value: self.ogg, fieldNumber: 2)
    }
    if !self.wav.isEmpty {
      try visitor.visitSingularStringField(value: self.wav, fieldNumber: 3)
    }
    if !self.webm.isEmpty {
      try visitor.visitSingularStringField(value: self.webm, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chesscom_Themes_V1alpha_SoundSet.SoundArchives, rhs: Chesscom_Themes_V1alpha_SoundSet.SoundArchives) -> Bool {
    if lhs.mp3 != rhs.mp3 {return false}
    if lhs.ogg != rhs.ogg {return false}
    if lhs.wav != rhs.wav {return false}
    if lhs.webm != rhs.webm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chesscom_Themes_V1alpha_SoundSet.SoundFiles: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Chesscom_Themes_V1alpha_SoundSet.protoMessageName + ".SoundFiles"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mp3"),
    2: .same(proto: "ogg"),
    3: .same(proto: "wav"),
    4: .same(proto: "webm"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.mp3) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.ogg) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.wav) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.webm) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mp3.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.mp3, fieldNumber: 1)
    }
    if !self.ogg.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.ogg, fieldNumber: 2)
    }
    if !self.wav.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.wav, fieldNumber: 3)
    }
    if !self.webm.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.webm, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Chesscom_Themes_V1alpha_SoundSet.SoundFiles, rhs: Chesscom_Themes_V1alpha_SoundSet.SoundFiles) -> Bool {
    if lhs.mp3 != rhs.mp3 {return false}
    if lhs.ogg != rhs.ogg {return false}
    if lhs.wav != rhs.wav {return false}
    if lhs.webm != rhs.webm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
